"""
Zepp cardio loader (functional minimal).
Looks for:
  - data_etl/P000001/zepp_processed/_latest/zepp_hr_daily.csv (HR)
  - data_etl/P000001/zepp_processed/_latest/zepp_daily_features.csv (HRV)
Falls back to per-metric files if you copy them to the snapshot.
"""
from typing import Optional, List
import os
import numpy as np
import pandas as pd
from etl_modules.common.io import read_csv_if_exists, to_local_dt
from etl_modules.common.adapters import ProviderContext, HRProvider, register_provider

def _date_col(series) -> pd.Series:
    s = pd.to_datetime(series)
    if hasattr(s, "dt"):
        return s.dt.date
    return s.astype("datetime64[ns]").astype("datetime64[D]")

def _first_existing(paths: List[str]) -> Optional[str]:
    for p in paths:
        if os.path.exists(p):
            return p
    return None

class ZeppCardio(HRProvider):
    def load_hr(self, ctx: ProviderContext) -> Optional[pd.DataFrame]:
        candidates = [
            os.path.join("data_etl", "P000001", "zepp_processed", "_latest", "zepp_hr_daily.csv"),
            os.path.join(ctx.snapshot_dir, "per-metric", "zepp_hr_daily.csv"),
        ]
        path = _first_existing(candidates)
        if not path:
            return None
        df = read_csv_if_exists(path)
        if df is None or df.empty:
            return None

        cols = {c.lower(): c for c in df.columns}
        tcol = cols.get("timestamp") or cols.get("time") or cols.get("date") or list(df.columns)[0]
        hcol = cols.get("bpm") or cols.get("hr") or list(df.columns)[1]

        if tcol == "date":
            df["timestamp"] = pd.to_datetime(df["date"])
        else:
            df["timestamp"] = to_local_dt(df[tcol], ctx.tz)

        df = df.rename(columns={hcol: "bpm"})
        df = df[["timestamp", "bpm"]].dropna(subset=["timestamp"]).sort_values("timestamp")
        df.loc[(df["bpm"] < 35) | (df["bpm"] > 220), "bpm"] = np.nan
        df["date"] = _date_col(df["timestamp"])
        df["source"] = "zepp"
        return df

    def load_hrv(self, ctx: ProviderContext) -> Optional[pd.DataFrame]:
        candidates = [
            os.path.join("data_etl", "P000001", "zepp_processed", "_latest", "zepp_daily_features.csv"),
            os.path.join(ctx.snapshot_dir, "per-metric", "zepp_hrv.csv"),
        ]
        path = _first_existing(candidates)
        if not path:
            return None
        df = read_csv_if_exists(path)
        if df is None or df.empty:
            return None

        metric = None
        if "rmssd_ms" in df.columns:
            metric = "rmssd_ms"
        elif "sdnn_ms" in df.columns:
            metric = "sdnn_ms"
        else:
            return None

        if "timestamp" in df.columns:
            ts = to_local_dt(df["timestamp"], ctx.tz)
        elif "date" in df.columns:
            ts = pd.to_datetime(df["date"])
        elif "day" in df.columns:
            ts = pd.to_datetime(df["day"])
        else:
            return None

        out = pd.DataFrame({"timestamp": ts, "val": df[metric].astype(float)})
        out.loc[(out["val"] <= 0) | (out["val"] > 350), "val"] = np.nan
        out["date"] = _date_col(out["timestamp"])
        out["metric"] = metric
        return out

register_provider("cardio", "zepp", ZeppCardio())
